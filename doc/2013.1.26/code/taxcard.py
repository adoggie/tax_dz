# -*- coding:utf-8 -*-# soctt.bin created  2011.5.7 # sw2us.com @2011 #import sys,os,os.path,time,struct,traceback,threading,datetimefrom taxbase import CallReturnimport taxbasefrom sysconfig import *from comtypes.client  import CreateObject#发票商品项		class InvoiceItem:	def __init__(self):		self.ListGoodsName=''		# – 商品或劳务名称 		self.ListTaxItem=''			# – 税目，4位数字，商品所属类别 		self.ListStandard=''		# – 规格型号 		self.ListUnit=''			# – 计量单位，如计量单位为空，则忽略数量和单价 		self.ListNumber=0			# – 数量 		self.ListPrice=0			# – 单价 		self.ListAmount=0			# – 金额，可以不传(为0)，由接口软件计算，如传入则应符合计算关系 		self.ListPriceKind=0		# – 含税价标志，单价和金额的种类， 0为不含税价，1为含税价 		self.ListTaxAmount=0		# – 税额，可以不传（为0），由接口软件计算，如传入则应符合计算关系 #开票处理结果class InvoiceResult:	def __init__(self):		self.InfoAmount=0			# – 合计不含税金额 		self.InfoTaxAmount=0		# – 合计税额 		self.InfoDate=0			# – 开票日期 		self.InfoMonth=0				# – 所属月份 		self.InfoTypeCode=''		# – 发票十位代码  [string]		self.InfoNumber=0			# – 发票号码  [integer]		self.GoodsListFlag=0		# – 销货清单标志，0 – 无销货清单，1 – 有销货清单 		def __unicode__(self):		return ''		def __str__(self):		return "InfoAmount:%s\nInfoTaxAmount:%s\nInfoDate:%s\nInfMonth:%s\nInfoTypeCode:%s\nInfoNumber:%s\nGoodsListFlag:%s\n"%(			self.InfoAmount,self.InfoTaxAmount,self.InfoDate,self.InfoMonth,self.InfoTypeCode,			self.InfoNumber,self.GoodsListFlag		)			#开票请求class InvoiceApply:	def __init__(self):		self.InfoClientName='' 			#购方名称		self.InfoClientTaxCode=''		#购方税号		self.InfoClientBankAccount=''	# – 购方开户行及账号 		self.InfoClientAddressPhone='' 	# – 购方地址电话 		self.InfoSellerBankAccount=''	# – 销方开户行及账号 		self.InfoSellerAddressPhone=''	# – 销方地址电话 		self.InfoTaxRate=''				# – 税率，17、13、6、4等 		self.InfoNotes=''				# – 备注 		self.InfoInvoicer=''			# – 开票人 		self.InfoChecker=''				# – 复核人，可为空 		self.InfoCashier=''				# – 收款人，可为空 		self.InfoListName=''			# – 如不为空，则开具销货清单，此为发票上商品名称栏的清单信息，应为“(详见销货清单)”字样 		self.items=[]		#增加销售项	def addItem(self,item):		self.items.append(item)		def clear(self):		slef.items=[]		class TaxDevice:	def __init__(self):		self.tax = None				self.InvLimit=0 #开票限额, 金税卡发票开具价税合计限额		self.TaxCode=''	#本单位税号		self.TaxClock=0	#金税卡时钟		self.MachineNo=''	#开票机号码，主开票机为0 		self.IsInvEmpty=0	#有票标志，0为金税卡中无可开发票，1为有票 		self.IsRepReached=0	#抄税标志，0为未到抄税期，1为已到抄税期			self.IsLockReached =0	#锁死标志，0为未到锁死期，1为已到锁死期					def OpenCard(self):		cr = CallReturn()		if self.tax :			return CallReturn()		try:			self.tax = CreateObject("{7126812F-8D2A-11D6-9C69-00E04C103A76}")		except:			self.tax = None			return CallReturn(succ=False,msg=u'Tax税控Com组件没有安装!')		r = self.tax.OpenCard()		if r!=0:			self.tax = None			return CallReturn(succ = False,msg=u'税控卡打开失败,请检查设备是否正常或被其他系统占用中!')						return cr		def GetInfo(self,invtype=0):		# InfoKind – 要开具的发票种类（0：专用发票 1：废旧物资发票 2：普通发票）		# InfoTypeCode – 要开具发票的十位代码 		#	InfoNumber – 要开具发票的号码 		#	InvStock – 发票剩余份数 		#	TaxClock – 金税卡时钟				if self.tax == None:			return CallReturn(succ=False,msg=u'税控卡未初始化!')				if invtype == 1:			invtype = 2		print invtype,type(invtype)		self.tax.InfoKind = invtype				self.tax.GetInfo()		cr = CallReturn()		cr.result={'InfoTypeCode':self.tax.InfoTypeCode,				   'InfoNumber':self.tax.InfoNumber,				   'InvStock':self.tax.InvStock,				   'TaxClock':self.tax.TaxClock,				   'InvLimit':self.tax.InvLimit,					 'TaxCode':self.tax.TaxCode,					 				   }		return cr		#开发票	def Invoice(self,inv,invtype):		# inv - InvoiceApply		# invtype - 发票类型 0 - 专用 , 1 - 普通 在这里要转换一下				if invtype == 1:			invtype = 2				self.tax.InfoKind = invtype #专用				cr = CallReturn()		if self.tax == None:			return CallReturn(succ=False,msg=u'税控卡未初始化!')				self.tax.InvInfoInit()		self.tax.InfoClientName = inv.InfoClientName		self.tax.InfoClientTaxCode = inv.InfoClientTaxCode		self.tax.InfoClientBankAccount = inv.InfoClientBankAccount		self.tax.InfoClientAddressPhone = inv.InfoClientAddressPhone		self.tax.InfoSellerBankAccount = inv.InfoSellerBankAccount		self.tax.InfoSellerAddressPhone = inv.InfoSellerAddressPhone		self.tax.InfoTaxRate = inv.InfoTaxRate		self.tax.InfoNotes = inv.InfoNotes		self.tax.InfoInvoicer = inv.InfoInvoicer		self.tax.InfoChecker = inv.InfoChecker		self.tax.InfoCashier = inv.InfoCashier		self.tax.InfoListName = inv.InfoListName		self.tax.ClearInvList()		for n in inv.items:			self.tax.InvListInit()			self.tax.ListGoodsName = n.ListGoodsName			self.tax.ListTaxItem = n.ListTaxItem			self.tax.ListStandard = n.ListStandard			self.tax.ListUnit = n.ListUnit			self.tax.ListNumber = n.ListNumber			self.tax.ListPrice = n.ListPrice			self.tax.ListAmount = n.ListAmount			self.tax.ListPriceKind = n.ListPriceKind			self.tax.ListTaxAmount = n.ListTaxAmount			self.tax.AddInvList()		#print 'invoice ..'		self.tax.Invoice()		if self.tax.RetCode != taxbase.ERR_INVOICE_SUCC[0]:			print 'invoice fault!',self.tax.RetCode,taxbase.getErrorMsg(self.tax.RetCode)			return CallReturn(succ=False,msg=taxbase.getErrorMsg(self.tax.RetCode))		#开票结果		r = InvoiceResult()						r.InfoAmount= self.tax.InfoAmount		r.InfoTaxAmount= self.tax.InfoTaxAmount		r.InfoDate= self.tax.InfoDate		r.InfoMonth= self.tax.InfoMonth		r.InfoTypeCode= self.tax.InfoTypeCode		r.InfoNumber= self.tax.InfoNumber		r.GoodsListFlag= self.tax.GoodsListFlag				cr.result = r					return cr		#打印发票	#InfoTypeCode – 要打印发票的十位代码 	#InfoNumber – 要打印发票的号码 	integer	#GoodsListFlag – 销货清单标志，0 – 打印发票，1 – 打印销货清单 (仅仅产生 *.xps文件)	#invtype -  0 - 专用 ; 1 - 普通发票	def PrintInv(self,typecode,number,invtype,flag=0):		if self.tax == None:			return CallReturn(succ=False,msg=u'税控卡未初始化!')				if invtype == 1:			invtype = 2				self.tax.InfoKind = invtype #专用				print typecode,number,invtype,flag		cr = CallReturn()		self.tax.InfoTypeCode = typecode		self.tax.InfoNumber = number		self.tax.GoodsListFlag = flag		self.tax.PrintInv()				#5001 – 未找到发票或清单 		#5011 – 打印成功 		#5012 – 未打印  		#5013 – 打印失败 		if self.tax.RetCode!= taxbase.ERR_PRINT_SUCC[0]:			return CallReturn(succ=False,msg=taxbase.getErrorMsg(self.tax.RetCode))		return cr		#作废发票		#InfoTypeCode – 要作废发票的十位代码 	#InfoNumber – 要作废发票的号码	def CancelInv(self,typecode,number,invtype):		#6001 – 当月发票库未找到该发票 		#6002 – 该发票已经作废 		#6011 – 作废成功 		#6012 – 未作废 		#6013 – 作废失败		if self.tax == None:			return CallReturn(succ=False,msg=u'税控卡未初始化!')				if invtype == 1:			invtype = 2				self.tax.InfoKind = invtype #专用				cr = CallReturn()		self.tax.InfoTypeCode = typecode		self.tax.InfoNumber = number		self.tax.CancelInv()		print self.tax.Retcode		if self.tax.RetCode!=6011:			return CallReturn(succ=False,msg=taxbase.getErrorMsg(self.tax.RetCode))		return cr	def CloseCard(self):		if self.tax:			self.tax.CloseCard()			self.tax=None		return CallReturn()		def test():	card =TaxDevice()		if card.OpenCard().succ==False:		print 'card open failed!'		return	print card.GetInfo()	inv = InvoiceApply()	inv.InfoClientName=u'上海全格信息科技x'	inv.InfoClientTaxCode='012345678901234'	inv.InfoClientBankAccount=u'上海银行浦江分行1123222-2233-2222'	inv.InfoClientAddressPhone=u'浦池南路238号'	inv.InfoSellerBankAccount=u'建设银行三林分行 2222-333'	inv.InfoSellerAddressPhone=u'淮海路1123号'	inv.InfoTaxRate = 17	inv.InfoNotes=u'写一些备注信息'	inv.InfoInvoicer=u'阿毛'	inv.InfoChecker=u'啊关'	inv.InfoCashier=u'阿狗'	#inv.InfoListName=u'详见销货清单^-^'	for x in range(20):		item = InvoiceItem()		item.ListGoodsName = u'dell电脑x201i'		item.ListTaxItem='5001'		item.ListStandard=u'GB65534'		item.ListUnit=u'台'		item.ListNumber=1+x		item.ListPrice=10300.00		item.ListAmount=0		item.ListPriceKind=0		item.ListTaxAmount=0		inv.addItem(item)	r = card.Invoice(inv)	print r.result		card.CloseCard()	def invoice_discard(typecode,number):	card =TaxDevice()		if card.OpenCard().succ==False:		print 'card open failed!'		return	print card.GetInfo()	card.CancelInv(typecode,number)	card.CloseCard()	def invoice_print(typecode,number):	card =TaxDevice()		if card.OpenCard().succ==False:		print 'card open failed!'		return		card.PrintInv(typecode,number,1)	card.CloseCard()		def init():	#test()		invoice_print('3100062530',478580)	if __name__=='__main__':	init()	