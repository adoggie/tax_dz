# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,datetimeimport appconfigimport taxerroros.environ['DJANGO_SETTINGS_MODULE'] = 'settings'gAppConfig = Noneif gAppConfig == None:	cfg = appconfig.SimpleConfig()	cfg.load('taxcfg.txt')	gAppConfig =cfgif not os.environ.has_key('ORACLE_HOME'):		orahome = gAppConfig.getValue('oracle.home')	os.environ['ORACLE_HOME']=orahome#导入当前类库路径,必须插入在头部path = os.path.dirname(os.path.dirname(__file__))sys.path.insert(0,path)ERR_TAXDEVICE_CLOSED = (1,u'尚未开启金税卡')ERR_TAXDEVICE_OCCUPIED = (1007,u'金税卡不能独占')ERR_TAXDEVICE_OPEN_SUCC = (1011,u'金税卡成功开启')ERR_TAXDEVICE_GETINFO_SUCC = (3011,u'金税卡成功开启，获取信息成功')ERR_INVOICE_DATA_INVALID = (4001,u'传入发票数据不合法')ERR_TAXDEVICE_ERROR = (4002,u'开票前金税卡状态错')ERR_TAXDEVICE_CALLFAILD = (4003,u'金税卡开票调用错误')ERR_TAXDEVICE_ERROR2 = (4004,u'开票后取金税卡状态错')ERR_INVOICE_SUCC =(4011,u'开票成功')ERR_INVOICE_FAILED = (4012,u'开票失败')ERR_INVOICE_INVALID = (4013,u'所开发票已作废')ERR_INVOICE_NOTFOUND = (5001,u'未找到发票或清单')ERR_PRINT_SUCC = (5011,u'打印成功')ERR_PRINT_UNREADY = (5012,u'未打印')ERR_PRINT_FAILED=(5013,u'打印失败')ERR_INVOICE_MONTHLY_NOTFOUND = (6001,u'当月发票库未找到该发票')ERR_INVOICE_INVALID2=(6002,u'该发票已经作废')ERR_INVOICE_DISCARD_SUCC = (6011,u'作废成功')ERR_INVOICE_DISCARD_NOEFFECT=(6012,u'未作废')ERR_INVOICE_DISCARD_FAILED=(6013,u'作废失败')QUANTITY_FLOAT_WIDTH = 6 #数量小数位数CURRENCY_FLOAT_WIDTH = 6GLOBAL_ERRORS=(	ERR_TAXDEVICE_CLOSED,	ERR_TAXDEVICE_OCCUPIED,	ERR_TAXDEVICE_OPEN_SUCC,	ERR_TAXDEVICE_GETINFO_SUCC,	ERR_INVOICE_DATA_INVALID,	ERR_TAXDEVICE_ERROR,	ERR_TAXDEVICE_ERROR2,	ERR_TAXDEVICE_CALLFAILD,	ERR_INVOICE_SUCC,	ERR_INVOICE_FAILED,	ERR_INVOICE_INVALID,	ERR_INVOICE_NOTFOUND,	ERR_PRINT_SUCC,	ERR_PRINT_UNREADY,	ERR_PRINT_FAILED,	ERR_INVOICE_MONTHLY_NOTFOUND,	ERR_INVOICE_INVALID2,	ERR_INVOICE_DISCARD_SUCC,	ERR_INVOICE_DISCARD_NOEFFECT,	ERR_INVOICE_DISCARD_FAILED,	)def getErrorMsg(id):	id = int(id)		for e in GLOBAL_ERRORS:				if e[0] == id:			print e[1]			return e[1]	return ''class CallReturn:	def __init__(self,succ =True,msg='',result=None,code=taxerror.ERROR_OK):		self.succ = succ		self.errcode = code  #没错误 		self.msg = msg		self.result = result  #携带任何数据返回s			#def __str__(self):	#	return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)		def __unicode__(self):		return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)	#ORDER BYOB_TIME_ASC = 0OB_TIME_DESC = 1OB_BILL_AMOUNT_ASC = 2OB_BILL_AMOUNT_DESC = 3#订单查询Q_TYPE_BILL_ALL = 0Q_TYPE_BILL_MERGED = 1Q_TYPE_BILL_SPLITED = 2Q_BY_CLIENT_NAME = 0Q_BY_CLIENT_SID = 2 #客户编号Q_BY_BILL_SID = 1 #订单编号#发票查询Q_INVOICE_BILLSID = 0 #订单编号Q_INVOICE_CLIENT_TAXCODE = 1 #税号Q_INVOICE_CLIENT_SID= 2 #客户代码Q_INVOICE_CLIENT_NAME = 3 #客户名称Q_BILL_TEXT_BILLNO = 0 #查询单据过滤内容 根据 单据编号Q_BILL_TEXT_CLIENT_TAXCODE =1 # 客户税号Q_BILL_TEXT_CLIENT_SID = 2	#客户代码Q_BILL_TEXT_CLIENT_NAME = 3 	#客户名称Q_BILL_TYPE_INITED = 0 #初始单据Q_BILL_TYPE_MERGED = 1 #合并的新单据Q_BILL_TYPE_SPLITED = 2 #拆分之后的新单据Q_BILL_TYPE_INVOICED = 3 #已开票单据Q_BILL_TYPE_NEGATIVE = 4 #负数单据Q_BILL_TYPE_TOGETHER = 5 #团购拆单Q_CLIENT_BY_SID = 0 #客户编号Q_CLIENT_BY_NAME = 1	#客户名称Q_CLIENT_BY_TAXCODE = 2	#客户税号Q_GOODS_BY_SID = 0 #商品编号Q_GOODS_BY_NAME = 1 #商品名称INVOICE_TYPE_DADICATED = 0 #专用发票INVOICE_TYPE_NORMAL = 1 #普通发票def formDateTime(dt):	if not dt:		return '-'*10	s = str(dt)	ss = s.split('.')		return ss[0]def nomarlizeDate(dt):	if dt == None:		dt = datetime.datetime.now()	dt = datetime.datetime(dt.year,dt.month,dt.day)	return dtdef normalizeDateRange(st,et):	if st == None:		st = datetime.datetime(2000,1,1)	else:		st = st + datetime.timedelta(hours=8)		st = datetime.datetime(st.year,st.month,st.day) 				if et == None:		et = datetime.datetime.now()		et = et + datetime.timedelta(hours=8)	et = datetime.datetime(et.year,et.month,et.day)	et = et +datetime.timedelta(days=1)	return st,etdef billTypeName(type):	name = u'初始订单'	if type ==1:		name = u'合并订单'	elif type == 2:		name = u'拆分订单'	elif type == 3:		name = u'团购拆单'	return nameif __name__=='__main__':	print getErrorMsg(4002)