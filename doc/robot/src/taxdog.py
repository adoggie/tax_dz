# -*- coding:utf-8 -*-# soctt.bin created  2011.5.7 # sw2us.com @2011 #import sys,os,os.path,time,struct,traceback,threading,datetime,struct,arrayfrom taxbase import CallReturnimport taxbasefrom comtypes.client  import CreateObjectimport ctypesfrom ctypes import *#_lib = windll.LoadLibrary('FT_ET99_API.dll')_lib = windll.LoadLibrary('startup.dat')#_lib = cdll.LoadLibrary('FT_ET99_API.dll')et_FindToken = _lib.et_FindTokenet_FindToken.restype = c_intet_FindToken.argtypes = (c_char_p,POINTER(c_int))et_OpenToken = _lib.et_OpenTokenet_OpenToken.restype = c_intet_OpenToken.argtypes = (POINTER(c_int),c_char_p,c_int)et_Verify = _lib.et_Verifyet_Verify.restype = c_intet_Verify.argtypes = (c_long,c_int,c_char_p)et_Read = _lib.et_Readet_Read.restype = c_intet_Read.argtypes = (c_long,c_ushort,c_int,c_char_p)HID ='66E3EDFF'class EncryptDevice:	def __init__(self):		self.lic ={}		self.handle = pointer(c_long(0))	def open(self):		try:			size = pointer(c_int(0))			et_FindToken(create_string_buffer(HID),size)			if size.contents.value == 0:				return False			rc = et_OpenToken(self.handle,HID,1)			if rc:				return False			rc = et_Verify(self.handle.contents.value,0,create_string_buffer('7747ee83cc1f779e') )			if rc:				return False			print rc			buf = create_string_buffer(40)			rc = et_Read(self.handle.contents.value,0,15,buf)			if  rc:				return False			self.lic['taxcode'] = buf.value			#buf = create_string_buffer(40)			rc = et_Read(self.handle.contents.value,20,8,buf)			if rc:				return False			self.lic['key'] = buf.value[:12]		except:			lic={}#			traceback.print_exc()			return False		return Truedef test():	dog = EncryptDevice()	print dog.open()	print dog.licif __name__=='__main__':	test()	