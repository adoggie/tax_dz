# -*- coding:utf-8 -*-# soctt.bin created  2011.5.7 # sw2us.com @2011 #import sys,os,os.path,time,struct,traceback,threading,datetime,struct,array,sqlite3import  pickle,hashlib,base64from taxbase import CallReturnimport taxbasefrom taxctrl import *sql_templ = '''BEGIN;CREATE TABLE "core_document" (    "doc_nr" varchar(30) NOT NULL,    "inv_type" varchar(30) NOT NULL,    "client_nr" varchar(80),    "red_nr" varchar(320),    "red_code" varchar(30),    "red_number" varchar(30),    "doc_date" varchar(30),    "cust_nr" varchar(30),    "cust_name" varchar(320),    "cust_tax_code" varchar(50),    "cust_address_tel" varchar(320),    "cust_bank_account" varchar(320),    "inv_taxrate" varchar(30),    "taxitem" varchar(80),    "memo" varchar(240),    "issuer" varchar(30),    "checker" varchar(30),    "payee" varchar(30),    "seller_name" varchar(240),    "seller_taxcode" varchar(240),    "seller_address" varchar(240),    "seller_bankacct" varchar(240),    "tax_flag" varchar(30),    "discount" varchar(30),    "status" integer NOT NULL,    "doc_time" varchar(30),    "pay_type" varchar(30),    "settlement_time" varchar(30));CREATE TABLE "core_documentitem" (    "doc_nr" varchar(30) NOT NULL,    "item_nr" varchar(30) NOT NULL,    "item_name" varchar(80),    "taxitem" varchar(30),    "spec" varchar(80),    "unit" varchar(30),    "qty" varchar(30),    "price" varchar(30),    "amount" varchar(30),    "taxrate" varchar(30),    "tax" varchar(30),    "flag_tax" varchar(30),    "discount_amount" varchar(30),    "discount_tax" varchar(30));CREATE TABLE "core_invoice" (    "doc_nr" varchar(30) NOT NULL,    "inv_type" varchar(30) NOT NULL,    "inv_code" varchar(80) NOT NULL,    "inv_number" varchar(80) NOT NULL,    "client_nr" varchar(80),    "cust_nr" varchar(30),    "cust_name" varchar(320),    "cust_tax_code" varchar(50),    "cust_address_tel" varchar(320),    "cust_bank_account" varchar(320),    "inv_date" varchar(30),    "inv_month" varchar(30),    "inv_amount" varchar(30),    "inv_taxrate" varchar(30),    "inv_tax" varchar(30),    "taxitem" varchar(80),    "memo" varchar(240),    "issuer" varchar(30),    "checker" varchar(30),    "payee" varchar(30),    "flag_dy" integer,    "flag_zf" integer,    "flag_qd" integer,    "flag_xf" integer,    "flag_dj" integer,    "flag_wk" integer,    "seller_name" varchar(240),    "seller_taxcode" varchar(240),    "seller_address" varchar(240),    "seller_bankacct" varchar(240),    "isuploaded" integer NOT NULL,    "doc_time" varchar(30),    "pay_type" varchar(30),    "settlement_time" varchar(30));CREATE TABLE "core_invoiceitem" (    "inv_code" varchar(80) NOT NULL,    "inv_number" varchar(80) NOT NULL,    "item_nr" varchar(30) NOT NULL,    "item_name" varchar(80),    "taxitem" varchar(30),    "spec" varchar(80),    "unit" varchar(30),    "qty" varchar(30),    "price" varchar(30),    "amount" varchar(30),    "taxrate" varchar(30),    "tax" varchar(30),    "flag_tax" varchar(30),    "discount_amount" varchar(30),    "discount_tax" varchar(30));CREATE INDEX "core_document_6d542704" ON "core_document" ("doc_nr");CREATE INDEX "core_document_17f1e1f1" ON "core_document" ("inv_type");CREATE INDEX "core_document_3d7dd0e5" ON "core_document" ("red_nr");CREATE INDEX "core_document_e56c8a8" ON "core_document" ("red_code");CREATE INDEX "core_document_50fe3122" ON "core_document" ("red_number");CREATE INDEX "core_document_706c493e" ON "core_document" ("doc_date");CREATE INDEX "core_document_2bcaac64" ON "core_document" ("cust_nr");CREATE INDEX "core_document_57690cc9" ON "core_document" ("cust_name");CREATE INDEX "core_document_1d80e17d" ON "core_document" ("cust_tax_code");CREATE INDEX "core_document_25316c09" ON "core_document" ("cust_address_tel");CREATE INDEX "core_document_6042f540" ON "core_document" ("cust_bank_account");CREATE INDEX "core_documentitem_6d542704" ON "core_documentitem" ("doc_nr");CREATE INDEX "core_documentitem_284e5b30" ON "core_documentitem" ("item_nr");CREATE INDEX "core_invoice_6d542704" ON "core_invoice" ("doc_nr");CREATE INDEX "core_invoice_2bcaac64" ON "core_invoice" ("cust_nr");CREATE INDEX "core_invoice_51b7d6a8" ON "core_invoice" ("flag_dy");CREATE INDEX "core_invoice_a9e7295" ON "core_invoice" ("flag_zf");CREATE INDEX "core_invoice_3478bb76" ON "core_invoice" ("flag_qd");CREATE INDEX "core_invoice_7ab9fe89" ON "core_invoice" ("flag_xf");CREATE INDEX "core_invoice_52d9c1a1" ON "core_invoice" ("flag_dj");CREATE INDEX "core_invoice_e779fd7" ON "core_invoice" ("flag_wk");CREATE INDEX "core_invoiceitem_569e60b4" ON "core_invoiceitem" ("inv_code");CREATE INDEX "core_invoiceitem_2ac2c3ce" ON "core_invoiceitem" ("inv_number");CREATE INDEX "core_invoiceitem_284e5b30" ON "core_invoiceitem" ("item_nr");COMMIT;'''from dbconn import *class TaxMemDB:	def __init__(self,file):		#self.db = sqlite3.connect(':memory:')		sql = ''		if not os.path.exists(file):			sql = sql_templ		self.db = sqlite3.connect(file)		self.db.text_factory = str#		print file,self.db		if sql:			self.db.executescript(sql)			self.db.commit()	def handle(self):		return self.db	def addInvoice(self,inv):		sql = "select count(*) as cnt from core_invoice where inv_code=? and inv_number=? "		cr = self.db.cursor()		cr.execute(sql,(inv.inv_code,inv.inv_number))#		rs = cr.fetchone()		rs = fetchoneDict(cr)		if rs['cnt']:			return True		inv.inv_amount = self.encrypt_s(inv.inv_amount)		sql ="insert into core_invoice values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"		cr = self.db.cursor()		itemcount = len(inv.items)		cr.execute(sql,(inv.inv_type,						inv.inv_code,						inv.inv_number,						inv.client_nr,						itemcount,		                inv.cust_name,		                inv.cust_tax_code,		                inv.cust_address_tel,		                inv.cust_bank_account,		                inv.crypt_ver,		                inv.crypt_text,		                inv.inv_date,		                inv.inv_month,		                inv.inv_amount,		                inv.inv_taxrate,		                inv.inv_tax,		                inv.goods_name,		                inv.taxitem,		                inv.memo,		                inv.issuer,		                inv.checker,		                inv.payee,		                inv.flag_dy,		                inv.flag_zf,		                inv.flag_qd,		                inv.flag_xf,		                inv.flag_dj,		                inv.flag_wk,		                inv.seller_name,		                inv.seller_taxcode,		                inv.seller_address,		                inv.seller_bankacct))		sql = 'insert into core_invoiceitem values(?,?,?,?,?,?,?,?,?,?,?,?)'		cr = self.db.cursor()		for item in inv.items:			cr.execute(sql,(				self.encrypt_s(inv.inv_code),			    self.encrypt_s(inv.inv_number),			    inv.cust_tax_code,			    item.item_name,			    item.taxitem,			    item.spec,			    item.unit,			    item.qty,			    item.price,			    item.taxrate,			    item.tax,			    item.flag_tax			))		self.db.commit()		pass	def deleteInvoice(self,taxcode,code,number):		cur = self.db.cursor()		sql = "select * from core_invoice where inv_code=? and inv_number=? and cust_tax_code=? "		cur.execute(sql,(code,number,taxcode))		rs = cur.fetchone()		return True	def getInvoice(self,taxcode,taxnumber):		from taxctrl import InvoiceInfo,InvoiceGoodsItem		inv = None		try:			inv = InvoiceInfo()			sql = "select * from core_invoice where inv_code=? and inv_number=? "			cr = self.db.cursor()			cr.execute(sql,(taxcode,taxnumber))			rs = fetchallDict(cr)			for r in rs:				inv.inv_type = r['inv_type']				inv.inv_code = r['inv_code']				inv.inv_number = r['inv_number']				inv.client_nr = r['client_nr']				inv.cust_name = r['cust_name']				inv.cust_tax_code =r['cust_tax_code']				inv.cust_address_tel =r['cust_address_tel']				inv.cust_bank_account =r['cust_bank_account']				inv.crypt_ver = r['crypt_ver']				inv.crypt_text = r['crypt_text']				inv.inv_date = r['inv_date']				inv.inv_month = r['inv_month']				inv.inv_amount = r['inv_amount']				inv.inv_taxrate =r['inv_taxrate']				inv.inv_tax =r['inv_tax']				inv.goods_name =r['goods_name']				inv.taxitem =r['taxitem']				inv.memo =r['memo']				inv.issuer =r['issuer']				inv.checker = r['checker']				inv.payee = r['payee']				inv.flag_dy =r['flag_dy']				inv.flag_zf =r['flag_zf']				inv.flag_qd =r['flag_qd']				inv.flag_xf =r['flag_xf']				inv.flag_dj =r['flag_dj']				inv.flag_wk =r['flag_wk']				inv.seller_name =r['seller_name']				inv.seller_taxcode =r['seller_taxcode']				inv.seller_address = r['seller_address']				inv.seller_bankacct =r['seller_bankacct']			taxcode = self.encrypt_s(taxcode)			taxnumber = self.encrypt_s(taxnumber)			sql = 'select * from core_invoiceitem where inv_code=? and inv_number=?'			cr = self.db.cursor()			cr.execute(sql,(taxcode,taxnumber))			rs = fetchallDict(cr)			for r in rs:				item = InvoiceGoodsItem()				item.item_name = r['item_name']				item.taxitem = r['taxitem']				item.spec = r['spec']				item.unit = r['unit']				item.qty = r['qty']				item.price = r['price']				item.taxrate = r['taxrate']				item.tax = r['tax']				item.flag_tax =r['flag_tax']				inv.items.append(item)			inv.inv_amount = self.decrypt_s(inv.inv_amount)		except:			traceback.print_exc()			inv = None		return inv		passdef test():	pass	if __name__=='__main__':	test()	