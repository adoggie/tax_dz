# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,datetimeimport stringimport utilsimport jsonfrom dbconn import *ENCRYPT_PUBKEY='''-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQAB-----END PUBLIC KEY-----'''ENCRYPT_PRIVKEY='''-----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQABAoGBAIMYOyJmR9Tgc+89ZJaPlLVifwWgBvHld1i2uKWAOl+xKM7s/LBnEmXjYGAun8kCwuSn3tug6R8eQ8wgn/Kfq61/sEfTl7G07P/toUTR41hnmkESLsCj/DW+B45EqhJlVU5BInfhTKHo/GJHSJJM4qzGnFpvzboRcxJ+OWjkUoahAkEAuc2xgH4SZzkH3xp2v45xVKpJ+OXuGZdlctLy1+hKN1RtFoXrD8P8sDBNfFjJ0g9+3qIU31HcuvXnKk25MCJVBQJBAM7CnUeSXQ68MYhB9Ze2SShwWLSusgdPB1BOhWrWVguLblX8vibngFJDH4HsmZH+1qGQ2IoVrvIvnw22NhMTxFsCQAJYOSQw8xSAYLwM/nCeYIm7+GD+rcl+4pXXWZ8l3EHke9fr6rJxO7ARe/jUuf8/mM9AZlkHFGz7i2Y6Qtr7o+0CQDnI0kQKd8+CcSVvqb+4xkFzBJeaq063m4eqKkdtl6aqVS/a7xnYYVicQdYB1fmji0CkRqBw5u/wtzcR0ZMLVzkCQDYl+2GunTk3G+SeWxQdQKjggPmyHwiX9UYAOdJs5/vLvjARuaAJ87jZjS0jB48WPnRNITjbCn9MBncEB7asch4=-----END RSA PRIVATE KEY-----'''class CallReturn:	def __init__(self,succ =True,msg='',result=None,code=0):		self.succ = succ		self.errcode = code  #没错误 		self.msg = msg		self.result = result  #携带任何数据返回s	#def __str__(self):	#	return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)	def __unicode__(self):		return 'succ:%s,errcode:%s,msg:%s,result:%s'%(self.succ,self.errcode,self.msg,self.result)class TaxConsts:	INVTYPE_NORMAL = 0  #普通发票	INVTYPE_SPECIAIL = 1 #专用发票	TAX_INCLUDE = 1     #含税	TAX_EXCLUDE = 0     #不含税	MODE_CREATE = 1     #开票	MODE_PRINT  = 2     #打印	MODE_CREATE_PRINT   = 3 #开票并打印	INVTYPE_NRED  = 0   #正常发票	INVTYPE_RED   = 1   #红冲发票	PAYTYPE_CASH    = 1 #现金支付	PAYTYPE_CHECK   = 2 #支票	PRINT_MAIN  = 0     #打印发票主体	PRINT_DETAIL = 1    #打印发票明细	g_errmsg=u'未知'class TaxDocumentItem:	def __init__(self):		self.item_nr=''		self.item_name = ''		self.unit =''		self.spec =''		self.price =0		self.qty = 0		self.amount =0		self.tax = 0  #税额		self.flag_tax = 1		self.discount_amount=0		self.discount_tax = 0		self.taxrate = 0		self.taxitem=''	def some(self):		self.item_name='打印机'		self.unit = '台'		self.spec ='FX-001'		self.price = 1000		self.qty = 10		self.amount = self.price * self.qty		return selfclass TaxDocument:	def __init__(self):		self.doc_nr =''		self.inv_type = 0		self.client_nr = ''		self.red_nr=''		self.red_code=''		self.red_number=''		self.doc_date=''		self.cust_nr=''		self.tax_flag = 1       #是否含税 1 - 含税  ； 0 -不含税( 默认)		self.discount = 0       #折扣数额		self.cust_name = ''		self.cust_tax_code =''		self.cust_address_tel =''		self.cust_bank_account =''		self.inv_taxrate = 0		self.taxitem = ''		self.memo= ''		self.checker = ''		self.payee =''		self.issuer=''		self.cust_nr=''#		self.doc_date=''		self.red_nr =''		self.red_code=''		self.red_number=''		self.seller_name=''		self.seller_taxcode=''		self.seller_address=''		self.seller_bankacct=''		self.settlement_time=''		self.status = 0 #		self.items=[]		r = utils.SimpleConfig().load('system.conf').get('tax_flag','1')		self.tax_flag = int(r)		self.doc_time = int(time.time())		self.pay_type = TaxConsts.PAYTYPE_CASH	def getAmount(self):		#计算订单商品总金额		amount = 0		try:			for item in self.items:				amount+=float(item.amount)		except:			traceback.print_exc()		return amount	def updateStatus(self,db,status):		'''		更新订单状态		'''		cur = db.cursor()		sql = "update core_document set status=? where doc_nr=? "		try:			cur.execute(sql,(status,self.doc_nr))			db.commit()		except:			traceback.print_exc()			return False		return True	def  delete(self,db):		cur = db.cursor()		sql = "delete from  core_document where doc_nr=? "		try:			cur.execute(sql,(self.doc_nr,))			sql = "delete from core_documentitem where doc_nr=?"			cur.execute(sql,(self.doc_nr,))			db.commit()		except:			traceback.print_exc()			return False		return True	def toString(self):		'''		 must encode be gbk		'''		try:			FS_F1='~+f1+~'			FS_F2='~+f2+~'			FS_F3='~+f3+~'			vars=[self.inv_taxrate,			      self.cust_name,			      self.cust_tax_code,			      self.cust_address_tel,			      self.cust_bank_account,			      self.memo,			      self.seller_bankacct,			      self.checker,			      self.payee,			      self.red_nr,			      self.red_code,			      self.red_number]#			print vars			vars = map(str,vars)			#print vars#			ps = map(lambda  x: unicode(x)+FS_F1,vars[:-1])#			ps+=unicode(vars[-1])##			s = u''.join(ps)			s = string.join(vars,FS_F1)			items=[]			for item in self.items:				vars=[ item.item_name,				       item.unit,				       item.spec,				       item.price,				       item.qty,				       item.amount				       ]#				ps = map(lambda  x: unicode(x)+FS_F1,vars[:-1])#				ps+=unicode(vars[-1])#				items.append( u''.join(ps))				vars = map(str,vars)				items.append(string.join(vars,FS_F1))			s+=FS_F3#			ps = map(lambda x:x+FS_F2,items[:-1])#			ps+=unicode(items[-1])#			s+= u''.join(ps)			s+=string.join(items,FS_F2)			#print s.decode('utf-8')			return s.decode('utf-8').encode('gbk')		except:			traceback.print_exc()			return ''	def save(self,db):		'''		retcode:			0 - succ			1 - db exception			2 - 订单存在,且已经开票，不允许再次导入		'''		try:			self.db = db			sql = "select * from core_document where doc_nr=? "			cr = self.db.cursor()			cr.execute(sql,(self.doc_nr,))			r = fetchoneDict(cr)			sql = ''			params=[]			if not r:				sql ="insert into core_document values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"				params=(					self.doc_nr,					self.inv_type,					self.client_nr,					self.red_nr,					self.red_code,					self.red_number,					self.doc_date,					self.cust_nr,					self.cust_name,					self.cust_tax_code,					self.cust_address_tel,					self.cust_bank_account,					self.inv_taxrate,					self.taxitem,					self.memo,					self.issuer,					self.checker,					self.payee,					self.seller_name,					self.seller_taxcode,					self.seller_address,					self.seller_bankacct,					self.tax_flag,					self.discount,					self.status,				    self.doc_time,				    self.pay_type,				    self.settlement_time					)			else:				if r['status']: #订单已开票,不能插入					return False,2				sql =   "update core_document set inv_type=?,client_nr=?," \						"red_nr=?,red_code=?,red_number=?,doc_date=?,cust_nr=?," \						"cust_name=?,cust_tax_code=?,cust_address_tel=?,cust_bank_account=?,inv_taxrate=?,"\						"taxitem=?,memo=?,issuer=?,checker=?,payee=?,seller_name=?,seller_taxcode=?," \						"seller_address=?,seller_bankacct=?,tax_flag=?,discount=?,doc_time=?,pay_type=?," \						"settlement_time=? where doc_nr=?"				params=(					self.inv_type,					self.client_nr,					self.red_nr,					self.red_code,					self.red_number,					self.doc_date,					self.cust_nr,					self.cust_name,					self.cust_tax_code,					self.cust_address_tel,					self.cust_bank_account,					self.inv_taxrate,					self.taxitem,					self.memo,					self.issuer,					self.checker,					self.payee,					self.seller_name,					self.seller_taxcode,					self.seller_address,					self.seller_bankacct,					self.tax_flag,					self.discount,					self.doc_time,					self.pay_type,					self.settlement_time,					self.doc_nr				)			cr = self.db.cursor()			cr.execute(sql,params)			if r: # add new				sql = 'delete from core_documentitem where doc_nr=?'				cr = self.db.cursor()				cr.execute(sql,(self.doc_nr,))			sql = 'insert into core_documentitem values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)'			cr = self.db.cursor()			for item in self.items:				cr.execute(sql,(					self.doc_nr,					item.item_nr,					item.item_name,					item.taxitem,					item.spec,					item.unit,					item.qty,					item.price,					item.amount,					item.taxrate,					item.tax,					item.flag_tax,				    item.discount_amount,				    item.discount_tax					))			self.db.commit()		except:			self.db.rollback()			traceback.print_exc()			return False,1		return True,0	def toInvoice(self):		inv = None		try:			inv = TaxInvoice()			inv.doc = self			inv.doc_nr = self.doc_nr			inv.inv_type= self.inv_type              #发票种类#			inv.inv_code=self.'inv_code']            #类别代码#			inv.inv_number= r['inv_number']          #发票号码			inv.client_nr = self.client_nr          #开票机号			inv.cust_nr = self.cust_nr			inv.cust_name= self.cust_name	        #购方名称			inv.cust_tax_code= self.cust_tax_code       #  购方税号			inv.cust_address_tel= self.cust_address_tel    #  购方地址电话			inv.cust_bank_account=self.cust_bank_account   #  购方银行帐号#			inv.inv_date= r['inv_date']            #  开票日期#			inv.inv_month=r['inv_month']           #  所属月份#			inv.inv_amount= r['inv_amount']          #  合计金额#			inv.inv_taxrate = r['inv_taxrate']             #  税率#			inv.inv_tax = r['inv_tax']            #  合计税额			#			inv.goods_name=''          #  主要商品名称			inv.taxitem= self.taxitem         #  商品税目			inv.memo= self.memo                #  备注			inv.issuer= self.issuer              #  开票人			inv.payee= self.payee               #  收款人			inv.checker= self.checker             #  复核人			inv.inv_taxrate = self.inv_taxrate  ##			inv.flag_dy=r['flag_dy']          #  打印标志#			inv.flag_zf=r['flag_zf']         #  作废标志#			inv.flag_qd=r['flag_qd']          #  清单标志#			inv.flag_xf=r['flag_xf']         #  修复标志#			inv.flag_dj =r['flag_dj']             #  登记标志#			inv.flag_wk =r['flag_wk']             #  外开标志			inv.seller_name= self.seller_name			inv.seller_taxcode = self.seller_taxcode			inv.seller_address =  self.seller_address			inv.seller_bankacct = self.seller_bankacct#			inv.isuploaded = r['isuploaded']			inv.doc_time = self.doc_time			inv.pay_type = self.pay_type			inv.settlement_time = self.settlement_time  #结算日期			sql = "select *  from core_invoiceitem where "\			      "inv_code=? and inv_number=? "			for r in self.items:				item = TaxInvoiceItem()				item.taxrate=r.taxrate         #税率				item.tax= r.tax             #税额				item.item_nr = r.item_nr				item.item_name= r.item_name       #商品名称				item.taxitem = r.taxitem       #商品税目				item.spec =  r.spec           #规格型号				item.unit= r.unit            #计量单位				item.qty= r.qty             #数量				item.price=r.price           #单价				item.amount = r.amount      #含税金额				item.flag_tax=r.flag_tax        #含税价标志				item.flag_1=''          #发票行性质				item.flag_2=''          #发票明细序号				item.goods_nr=''        #商品编号				item.discount_amount= r.discount_amount				item.discount_tax = r.discount_tax				inv.items.append(item)		except:			traceback.print_exc()			inv = None		return inv	@staticmethod	def from_db(db,doc_nr):		doc = None		cur = db.cursor()		sql = "select *  from core_document where doc_nr=?"		try:			cur.execute(sql,(doc_nr,))			rs = fetchallDict(cur)			if not rs:				return None			r = rs[0]			doc = TaxDocument()			doc.doc_nr = r['doc_nr']			doc.inv_type= r['inv_type']            #发票种类			doc.client_nr = r['client_nr']         #开票机号			doc.cust_nr = r['cust_nr']              #客户编号			doc.cust_name= r['cust_name']	        #购方名称			doc.cust_tax_code= r['cust_tax_code']       #  购方税号			doc.cust_address_tel=r['cust_address_tel']    #  购方地址电话			doc.cust_bank_account=r['cust_bank_account']   #  购方银行帐号			doc.doc_date= r['doc_date']            #  开票日期#			doc.inv_month=r['inv_month']           #  所属月份#			doc.inv_amount= r['inv_amount']          #  合计金额			doc.inv_taxrate = r['inv_taxrate']             #  税率#			doc.inv_tax = r['inv_tax']            #  合计税额			#			inv.goods_name=''          #  主要商品名称			doc.taxitem=r['taxitem']         #  商品税目			doc.memo=r['memo']                #  备注			doc.issuer=r['issuer']              #  开票人			doc.payee=r['payee']               #  收款人			doc.checker=r['checker']             #  复核人			doc.seller_name=r['seller_name']			doc.seller_taxcode = r['seller_taxcode']			doc.seller_address =  r['seller_address']			doc.seller_bankacct = r['seller_bankacct']			doc.status = r['status']			doc.doc_time = r['doc_time']			doc.pay_type = r['pay_type']			doc.settlement_time = r['settlement_time']			sql = "select *  from core_documentitem where "\			      "doc_nr=?"			cur.execute(sql,(doc_nr,))			rs = fetchallDict(cur)			for r in rs:				item = TaxDocumentItem()				#				item.inv_type=''        #发票种类				#				item.inv_code=''        #类别代码				#				item.inv_number=''      #发票号码				#				item.sell_nr = ''       #销售单据编号				#				item.amount=''          #金额				item.item_nr = r['item_nr']				item.item_name= r['item_name']       #商品名称				item.taxitem = r['taxitem']       #商品税目				item.spec =  r['spec']           #规格型号				item.unit= r['unit']            #计量单位				item.qty= r['qty']             #数量				item.price=r['price']           #单价				item.amount = r['amount']       #金额				item.taxrate=r['taxrate']         #税率				item.tax= r['tax']             #税额				item.flag_tax=r['flag_tax']        #含税价标志				item.discount_amount =r['discount_amount']				item.discount_tax =r['discount_tax']#				item.flag_1=''          #发票行性质#				item.flag_2=''          #发票明细序号#				item.goods_nr=''        #商品编号#				item.item_nr=''         #单据明细序号				doc.items.append(item)		except:			traceback.print_exc()			return None		return doc	@staticmethod	def from_xls(xlsfile):		'''		http://www.lexicon.net/sjmachin/xlrd.html#xlrd.xldate%5Fas%5Ftuple-function				xldate_as_tuple			Type symbol	Type number	Python value			XL_CELL_EMPTY	0	empty string u''			XL_CELL_TEXT	1	a Unicode string			XL_CELL_NUMBER	2	float			XL_CELL_DATE	3	float			XL_CELL_BOOLEAN	4	int; 1 means TRUE, 0 means FALSE			XL_CELL_ERROR	5	int representing internal Excel codes; for a text representation, refer to the supplied dictionary error_text_from_code			XL_CELL_BLANK	6	empty string u''. Note: this type will appear only when open_workbook(..., formatting_info=True) is used.		订单导入：			将价格统一换算为不含税，然后存入数据库			2013.4.26   返回多个订单记录		'''		import xlrd		import utils#		global  g_errmsg		docs=[]		TaxConsts.g_errmsg = u'订单文件: %s 信息不合法!'%xlsfile		doc = None		try:			cur_nr=None			book = None			try:				book = xlrd.open_workbook(xlsfile)			except:				time.sleep(1)				book = xlrd.open_workbook(xlsfile)			sheet = book.sheet_by_index(0)			#if sheet.ncols != 27:			if sheet.ncols < 27:				return ()			if sheet.cell_value(0,0)!=u'发票种类':				return ()#			print sheet.row_values(1)#			print sheet.row_types(1)#			print  xlrd.xldate_as_tuple(sheet.cell_value(1,2),book.datemode)			# doc = TaxDocument()			doc = None			dochash={}			docs_ordered=[]			for r in range(1,sheet.nrows):				values = sheet.row_values(r)				for n in range(len(values)):					if values[n] == None:						values[n]=''					elif type(values[n]) == type(u''):						values[n] = values[n].encode('utf-8')				doc = TaxDocument()				if values[0] == '增票':					doc.inv_type = 1				elif values[0] == '普票':					doc.inv_type = 0				else:					#print 'unknown inv_type:',values[0]					break #return None 扫描结束				v = utils.SimpleConfig().load('system.conf').getInt('inv_as_type',2)				if v in (0,1):					doc.inv_type = v				doc.doc_nr,doc.doc_date,\				doc.cust_nr,doc.cust_name,doc.cust_tax_code,\				doc.cust_address_tel,doc.cust_bank_account,\				doc.memo,doc.red_nr,doc.red_code,doc.red_number,\				doc.issuer,doc.checker,doc.payee,\				doc.seller_bankacct,doc.seller_address = values[1:17]				doc.doc_nr = doc.doc_nr				y,m,d,h,M,s = xlrd.xldate_as_tuple(doc.doc_date,book.datemode)#					doc.doc_time ='%04d-%02d-%02d'%(y,m,d)				dt = time.mktime((y,m,d,h,M,s,0,0,0))				doc.doc_time = int(dt)				#print 'doc_time:',doc.doc_time#				if '1'== utils.SimpleConfig().load('system.conf').get('memo_include_doc_nr'):#					doc.memo += '\n订单编号:'+doc.doc_nr				item = TaxDocumentItem()				item.item_nr,item.item_name,item.spec,item.unit,item.qty,item.amount,item.taxrate,\				item.tax,item.discount_amount,item.discount_tax = values[17:27]				if  sheet.ncols >= 29: # dz 支付方式、结算日期					doc.pay_type,doc.settlement_time = values[27:29]    #2013.5.20				item.spec = unistr_strip(item.spec,40)				item.unit = unistr_strip(item.unit,40)				doc.inv_taxrate = float(item.taxrate)				#print 'import doc, amount:',item.amount				try:					amount = float(item.amount)					qty = float(item.qty)					taxrate = float(item.taxrate)					if amount==0 or qty == 0:						print 'amount or qty of document is invalid!'						return ()					if taxrate not in (0.06,0.13,0.17):						print 'taxrate :%s of document is invalid!'%taxrate						return ()				except:					return ()   #订单数据录入错误				item.price = 0				item.flag_tax = 1 #				doc.cust_nr = unistr_strip(doc.cust_nr,50)				doc.cust_tax_code = unistr_strip(doc.cust_tax_code,20)				doc.cust_name = unistr_strip(doc.cust_name,100)				doc.cust_address_tel = unistr_strip(doc.cust_address_tel,100)				doc.cust_bank_account = unistr_strip(doc.cust_bank_account,100)				doc.memo = unistr_strip(doc.memo,270)				doc.red_nr = unistr_strip(doc.red_nr,16)				doc.red_code = unistr_strip(doc.red_code,10)				doc.red_number = unistr_strip(doc.red_number,8)				doc.issuer = unistr_strip(doc.issuer,10)				if  sheet.ncols >=29: #					doc.pay_type = int(doc.pay_type)        #2013.5.20					y,m,d,h,M,s = xlrd.xldate_as_tuple(doc.settlement_time,book.datemode)					doc.settlement_time='%04d-%02d-%02d'%(y,m,d)				if not doc.cust_name:					#print 'doc:'+doc.doc_nr+ ' cust_name is null'					TaxConsts.g_errmsg = u'订单客户名称为空！'					return ()				if doc.inv_type == 1: #检查专用发票必填数据					if len(doc.cust_tax_code)!=15:						TaxConsts.g_errmsg = u'订单税号不合法!'						return ()     #税号不能为空					if len(doc.cust_bank_account) == 0:						TaxConsts.g_errmsg = u'订单银行账号信息不合法!'						return ()					if len(doc.cust_address_tel) == 0 :						TaxConsts.g_errmsg = u'订单客户地址信息不合法!'						return ()				if not dochash.has_key(doc.doc_nr):					dochash[doc.doc_nr]=[None,[]]				if not dochash[doc.doc_nr][0]:					dochash[doc.doc_nr][0] =  doc					docs_ordered.append(doc)				dochash[doc.doc_nr][1].append(item)			#finally , aggregated			for k,v in dochash.items():				doc = v[0]				for i in v[1]:					doc.items.append(i) #商品项加入				#docs.append(doc)						#order  docs			docs = docs_ordered		except:			traceback.print_exc()			docs = ()			g_errmsg = traceback.format_exc()		return docs	@staticmethod	def __from_xls(xlsfile):		'''		http://www.lexicon.net/sjmachin/xlrd.html#xlrd.xldate%5Fas%5Ftuple-function				xldate_as_tuple			Type symbol	Type number	Python value			XL_CELL_EMPTY	0	empty string u''			XL_CELL_TEXT	1	a Unicode string			XL_CELL_NUMBER	2	float			XL_CELL_DATE	3	float			XL_CELL_BOOLEAN	4	int; 1 means TRUE, 0 means FALSE			XL_CELL_ERROR	5	int representing internal Excel codes; for a text representation, refer to the supplied dictionary error_text_from_code			XL_CELL_BLANK	6	empty string u''. Note: this type will appear only when open_workbook(..., formatting_info=True) is used.		订单导入：			将价格统一换算为不含税，然后存入数据库		'''		import xlrd		import utils#		global  g_errmsg		doc = None		try:			cur_nr=None			book = None			try:				book = xlrd.open_workbook(xlsfile)			except:				time.sleep(1)				book = xlrd.open_workbook(xlsfile)			sheet = book.sheet_by_index(0)			if sheet.ncols != 27:				return None			if sheet.cell_value(0,0)!=u'发票种类':				return None#			print sheet.row_values(1)#			print sheet.row_types(1)#			print  xlrd.xldate_as_tuple(sheet.cell_value(1,2),book.datemode)			doc = TaxDocument()			for r in range(1,sheet.nrows):				values = sheet.row_values(r)				for n in range(len(values)):					if values[n] == None:						values[n]=''					elif type(values[n]) == type(u''):						values[n] = values[n].encode('utf-8')				if r==1:					if values[0] == '增票':						doc.inv_type = 1					elif values[0] == '普票':						doc.inv_type = 0					else:						#print 'unknown inv_type:',values[0]						break #return None					v = utils.SimpleConfig().load('system.conf').getInt('inv_as_type',2)					if v in (0,1):						doc.inv_type = v					doc.doc_nr,doc.doc_date,\					doc.cust_nr,doc.cust_name,doc.cust_tax_code,\					doc.cust_address_tel,doc.cust_bank_account,\					doc.memo,doc.red_nr,doc.red_code,doc.red_number,\					doc.issuer,doc.checker,doc.payee,\					doc.seller_bankacct,doc.seller_address = values[1:17]					doc.doc_nr = doc.doc_nr					y,m,d,h,M,s = xlrd.xldate_as_tuple(doc.doc_date,book.datemode)#					doc.doc_time ='%04d-%02d-%02d'%(y,m,d)					dt = time.mktime((y,m,d,h,M,s,0,0,0))					doc.doc_time = int(dt)					print 'doc_time:',doc.doc_time					if '1'== utils.SimpleConfig().load('system.conf').get('memo_include_doc_nr'):						doc.memo += '\n订单编号:'+doc.doc_nr#					#print doc.seller_address,type(doc.issuer)#					#print doc.cust_name,type(doc.cust_name)#					doc.cust_nr = doc.cust_nr.encode('utf-8')#					doc.cust_tax_code = doc.cust_tax_code.encode('utf-8')#					doc.cust_name = doc.cust_name.encode('utf-8')#					doc.cust_address_tel = doc.cust_address_tel.encode('utf-8')#					doc.cust_bank_account = doc.cust_bank_account.encode('utf-8')#					doc.taxitem = doc.taxitem.encode('utf-8')#					doc.memo = doc.memo.encode('utf-8')#					doc.issuer = doc.issuer.encode('utf-8')#					print type(doc.issuer),doc.doc_nr				if cur_nr and cur_nr != values[1]: #xls内仅读取相同订单编号的记录					break				cur_nr = values[1]				item = TaxDocumentItem()				item.item_nr,item.item_name,item.spec,item.unit,item.qty,item.amount,item.taxrate,\				item.tax,item.discount_amount,item.discount_tax = values[17:27]				item.spec = unistr_strip(item.spec,40)				item.unit = unistr_strip(item.unit,40)				if r==1:					doc.inv_taxrate = float(item.taxrate)				#默认含税，税率统一取第一条				#根据含税标志，由数量和单价计算金额				#如果含税，则将含税转化为不含税价格，推进去开票				if doc.tax_flag == 1:					amount = float(item.amount)/(1+doc.inv_taxrate) # not include tax#					amount = amount*(1+doc.inv_taxrate)					item.amount = round(amount,6)				item.price = item.amount/(item.qty*1.0)				item.price = round(item.price,6)				item.amount = round(item.amount,2)				item.flag_tax = 0 # doc.tax_flag 全部改为不含税价格				doc.items.append(item)#				print int(doc.issuer)				#print sheet.row_values(r)			doc.cust_nr = unistr_strip(doc.cust_nr,50)			doc.cust_tax_code = unistr_strip(doc.cust_tax_code,20)			doc.cust_name = unistr_strip(doc.cust_name,100)			doc.cust_address_tel = unistr_strip(doc.cust_address_tel,100)			doc.cust_bank_account = unistr_strip(doc.cust_bank_account,100)			doc.memo = unistr_strip(doc.memo,270)			doc.red_nr = unistr_strip(doc.red_nr,16)			doc.red_code = unistr_strip(doc.red_code,10)			doc.red_number = unistr_strip(doc.red_number,8)			doc.issuer = unistr_strip(doc.issuer,10)			if not doc.cust_name:				print 'doc:'+doc.doc_nr+ ' cust_name is null'				TaxConsts.g_errmsg = u'订单客户名称为空！'				return None			if doc.inv_type == 1: #检查专用发票必填数据				if len(doc.cust_tax_code)!=15:					TaxConsts.g_errmsg = u'订单税号不合法!'					return None     #税号不能为空				if len(doc.cust_bank_account) == 0:					TaxConsts.g_errmsg = u'订单银行账号信息不合法!'					return None				if len(doc.cust_address_tel) == 0 :					TaxConsts.g_errmsg = u'订单客户地址信息不合法!'					return None		except:			traceback.print_exc()			doc = None			g_errmsg = traceback.format_exc()		return docdef unistr_strip(var,length,codec='utf-8'):	if type(var) == type(0.0) or type(var) == type(0):#		var = str(var)		var = '%d'%var	var = var.decode(codec).strip()[:length]	return var.encode(codec)class TaxInvoiceItem:	def __init__(self):		self.inv_type=''        #发票种类		self.inv_code=''        #类别代码#		self.item_nr=''		self.inv_number=''      #发票号码		self.sell_nr = ''       #销售单据编号		self.amount=0          #金额		self.taxrate=0         #税率		self.tax=0             #税额		self.item_name=''       #商品名称		self.taxitem = ''       #商品税目		self.spec =''           #规格型号		self.unit=''            #计量单位		self.qty=0             #数量		self.price=0           #单价		self.flag_tax=''        #含税价标志		self.flag_1=''          #发票行性质		self.flag_2=''          #发票明细序号		self.goods_nr=''        #商品编号		self.item_nr=''         #单据明细序号		self.discount_amount=0		self.discount_tax = 0class TaxInvoice:	def __init__(self):		self.doc_nr = ''		self.inv_type=''            #发票种类		self.inv_code=''            #类别代码		self.inv_number=''          #发票号码		self.client_nr = ''         #开票机号		self.cust_nr = ''       #客户编号		self.cust_name=''	        #购方名称		self.cust_tax_code=''       #  购方税号		self.cust_address_tel=''    #  购方地址电话		self.cust_bank_account=''   #  购方银行帐号		self.crypt_ver=''           #  加密版本号		self.crypt_text=''          #  密文		self.inv_date=''            #  开票日期		self.inv_month=''           #  所属月份		self.inv_amount=0           #  合计金额		self.inv_taxrate =0             #  税率		self.inv_tax = 0            #  合计税额		self.goods_name=''          #  主要商品名称		self.taxitem=''         #  商品税目		self.memo=''                #  备注		self.issuer=''              #  开票人		self.payee=''               #  收款人		self.checker=''             #  复核人		self.flag_dy=''          #  打印标志		self.flag_zf=''         #  作废标志		self.flag_qd=''          #  清单标志		self.flag_xf=''         #  修复标志		self.flag_dj =''             #  登记标志		self.flag_wk =''             #  外开标志		self.seller_name=''		self.seller_taxcode = ''		self.seller_address =  ''		self.seller_bankacct = ''		self.db = None		self.doc = None		self.items=[]		self.doc_time = int(time.time())		self.pay_type = TaxConsts.PAYTYPE_CASH		self.settlement_time=''	def to_hash(self):		d = {			'doc_nr':self.doc_nr,			'inv_type':self.inv_type,		    'inv_code':self.inv_code,		    'inv_number':self.inv_number,		    'client_nr':self.client_nr,		    'cust_nr':self.cust_nr,		    'cust_name':self.cust_name,		    'cust_tax_code':self.cust_tax_code,		    'cust_address_tel':self.cust_address_tel,		    'cust_bank_account':self.cust_bank_account,		    'inv_date':self.inv_date,		    'inv_month':self.inv_month,		    'inv_amount':self.inv_amount,		    'inv_taxrate':self.inv_taxrate,		    'inv_tax':self.inv_tax,		    'memo':self.memo,		    'issuer':self.issuer,		    'checker':self.checker,		    'payee':self.payee,		    'flag_dy':self.flag_dy,		    'flag_zf':self.flag_zf,		    'flag_qd':self.flag_qd,		    'flag_xf':self.flag_xf,		    'flag_dj':self.flag_dj,		    'flag_wk':self.flag_wk,		    'seller_name':self.seller_name,		    'seller_taxcode':self.seller_taxcode,		    'seller_address':self.seller_address,		    'seller_bankacct':self.seller_bankacct,		    'doc_time':self.doc_time,		    'pay_type':self.pay_type,		    'settlement_time':self.settlement_time		}		return d	def save(self,db):		try:			self.db = db			inv = self			sql = "select count(*) as cnt from core_invoice where inv_code=? and inv_number=? "			cr = self.db.cursor()			cr.execute(sql,(inv.inv_code,inv.inv_number))			#		rs = cr.fetchone()			rs = fetchoneDict(cr)			if rs['cnt']:				return True			sql ="insert into core_invoice values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"			cr = self.db.cursor()#			itemcount = len(inv.items)			cr.execute(sql,(				inv.doc_nr,				inv.inv_type,				inv.inv_code,				inv.inv_number,				inv.client_nr,				inv.cust_nr,				inv.cust_name,				inv.cust_tax_code,				inv.cust_address_tel,				inv.cust_bank_account,				inv.inv_date,				inv.inv_month,				inv.inv_amount,				inv.inv_taxrate,				inv.inv_tax,				inv.taxitem,				inv.memo,				inv.issuer,				inv.checker,				inv.payee,				inv.flag_dy,				inv.flag_zf,				inv.flag_qd,				inv.flag_xf,				inv.flag_dj,				inv.flag_wk,				inv.seller_name,				inv.seller_taxcode,				inv.seller_address,				inv.seller_bankacct,				0,			    inv.doc_time,			    inv.pay_type,			    inv.settlement_time			))			sql = 'insert into core_invoiceitem values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)'			cr = self.db.cursor()			for item in inv.items:				cr.execute(sql,(					inv.inv_code,					inv.inv_number,	#				inv.cust_tax_code,                    item.item_nr,					item.item_name,					item.taxitem,					item.spec,					item.unit,					item.qty,					item.price,					item.amount,					item.taxrate,					item.tax,					item.flag_tax,				    item.discount_amount,				    item.discount_tax				))			self.db.commit()		except:			traceback.print_exc()			return False		return True	@staticmethod	def from_db(db,code,number):		inv = None		cur = db.cursor()		sql = "select *  from core_invoice where inv_code=? and inv_number=? "		try:			cur.execute(sql,(code,number))			rs = fetchallDict(cur)			# print rs			if not rs:				return None			r = rs[0]			inv = TaxInvoice()#			inv.db = db			inv.doc_nr = r['doc_nr']			inv.inv_type= r['inv_type']            #发票种类			inv.inv_code=r['inv_code']            #类别代码			inv.inv_number= r['inv_number']          #发票号码			inv.client_nr = r['client_nr']         #开票机号			inv.cust_nr = r['cust_nr']			inv.cust_name= r['cust_name']	        #购方名称			inv.cust_tax_code= r['cust_tax_code']       #  购方税号			inv.cust_address_tel=r['cust_address_tel']    #  购方地址电话			inv.cust_bank_account=r['cust_bank_account']   #  购方银行帐号			inv.inv_date= r['inv_date']            #  开票日期			inv.inv_month=r['inv_month']           #  所属月份			inv.inv_amount= r['inv_amount']          #  合计金额			inv.inv_taxrate = r['inv_taxrate']             #  税率			inv.inv_tax = r['inv_tax']            #  合计税额#			inv.goods_name=''          #  主要商品名称			inv.taxitem=r['taxitem']         #  商品税目			inv.memo=r['memo']                #  备注			inv.issuer=r['issuer']              #  开票人			inv.payee=r['payee']               #  收款人			inv.checker=r['checker']             #  复核人			inv.flag_dy=r['flag_dy']          #  打印标志			inv.flag_zf=r['flag_zf']         #  作废标志			inv.flag_qd=r['flag_qd']          #  清单标志			inv.flag_xf=r['flag_xf']         #  修复标志			inv.flag_dj =r['flag_dj']             #  登记标志			inv.flag_wk =r['flag_wk']             #  外开标志			inv.seller_name=r['seller_name']			inv.seller_taxcode = r['seller_taxcode']			inv.seller_address =  r['seller_address']			inv.seller_bankacct = r['seller_bankacct']			inv.isuploaded = r['isuploaded']			inv.doc_time = r['doc_time']			inv.pay_type = r['pay_type']			inv.settlement_time = r['settlement_time']			sql = "select *  from core_invoiceitem where " \			      "inv_code=? and inv_number=? "			cur.execute(sql,(code,number))			rs = fetchallDict(cur)			for r in rs:				item = TaxInvoiceItem()#				item.inv_type=''        #发票种类#				item.inv_code=''        #类别代码#				item.inv_number=''      #发票号码#				item.sell_nr = ''       #销售单据编号#				item.amount=''          #金额				item.taxrate=r['taxrate']         #税率				item.tax= r['tax']             #税额				item.item_name= r['item_name']       #商品名称				item.taxitem = r['taxitem']       #商品税目				item.spec =  r['spec']           #规格型号				item.unit= r['unit']            #计量单位				item.qty= r['qty']             #数量				item.price=r['price']           #单价				item.amount = r['amount']       #开票金额				item.flag_tax=r['flag_tax']        #含税价标志				item.flag_1=''          #发票行性质				item.flag_2=''          #发票明细序号				item.goods_nr=''        #商品编号				item.item_nr=r['item_nr']         #单据明细序号				item.discount_amount = r['discount_amount']				item.discount_tax = r['discount_tax']				inv.items.append(item)		except:			traceback.print_exc()			return None		return inv		pass	#作废	def cancel(self,db):		'''			1.作废发票，必须将发票记录标识为 未上传，等待再次上传到服务器			2. 作废发票之前关联的订单必须还原为可开票状态		'''		self.db = db		cur = self.db.cursor()		sql = "update core_invoice set isuploaded = 0 , flag_zf=1 where inv_code=? and inv_number=? "		try:			cur.execute(sql,(self.inv_code,self.inv_number))			sql = 'update core_document set status=0 where doc_nr=?'			cur.execute(sql,(self.doc_nr,))			self.db.commit()		except:			traceback.print_exc()			return False		return True#		rs = cur.fetchone()	def setUploadFlag(self,db,flag=1):		cur = db.cursor()		sql = "update core_invoice set isuploaded=? where inv_code=? and inv_number=? "		try:			cur.execute(sql,(flag,self.inv_code,self.inv_number))			db.commit()		except:			traceback.print_exc()			return False		return Trueclass RedirectFile_stdout():	def __init__(self, logfile='app.log'):		self.out = sys.stdout		self.newLine = True		logfile = logfile +'.'+ time.strftime("%Y-%m-%d", time.localtime())		self.log = open(logfile,'a+')		sys.stdout = self	def formatTime(self):		return time.strftime("%Y-%m-%d %H:%M:%S  ", time.localtime())	def write(self, s):		s = s.encode('gbk')		s = s.strip()		if not s:			return		s= self.formatTime() + s		s+='\n'		self.log.write(s)		self.out.write(s)	def flush(self):		self.out.flush()		self.log.flush()if __name__=='__main__':#	doc = TaxDocument.from_xls('./test/g3.xls')	doc = TaxDocument.from_xls(u'C:/Users/Administrator/Desktop/样本数据/Ex于宏201303221001.xls')	#print doc.toString()#	date = u'2013年4月6日'#	y,left = date.split(u'年')#	m,left = left.split(u'月')#	d,left = left.split(u'日')#	print y,m,d